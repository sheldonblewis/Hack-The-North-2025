"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import { IconInfoCircle } from "@tabler/icons-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "~/components/ui/card";

interface VulnerabilityData {
  model: string;
  provider: string;
  jailbreak: number;
  promptInjection: number;
  toxicity: number;
  piiExtraction: number;
  socialEngineering: number;
  contextManipulation: number;
}

interface TooltipData {
  model: string;
  attackType: string;
  successRate: number;
  attempts: number;
}

const vulnerabilityData: VulnerabilityData[] = [
  {
    model: "Command R+",
    provider: "Cohere",
    jailbreak: 12,
    promptInjection: 8,
    toxicity: 5,
    piiExtraction: 15,
    socialEngineering: 18,
    contextManipulation: 10
  },
  {
    model: "Gemini Pro",
    provider: "Google",
    jailbreak: 20,
    promptInjection: 25,
    toxicity: 12,
    piiExtraction: 22,
    socialEngineering: 28,
    contextManipulation: 18
  },
  {
    model: "GPT-4 Turbo",
    provider: "OpenAI",
    jailbreak: 8,
    promptInjection: 12,
    toxicity: 6,
    piiExtraction: 10,
    socialEngineering: 14,
    contextManipulation: 9
  },
  {
    model: "Claude-3 Opus",
    provider: "Anthropic",
    jailbreak: 5,
    promptInjection: 7,
    toxicity: 3,
    piiExtraction: 8,
    socialEngineering: 10,
    contextManipulation: 6
  },
  {
    model: "Llama-3.3 70B",
    provider: "Cerebras",
    jailbreak: 18,
    promptInjection: 22,
    toxicity: 16,
    piiExtraction: 20,
    socialEngineering: 25,
    contextManipulation: 19
  },
  {
    model: "Mistral Large",
    provider: "Mistral",
    jailbreak: 15,
    promptInjection: 18,
    toxicity: 11,
    piiExtraction: 17,
    socialEngineering: 21,
    contextManipulation: 14
  }
];

const attackTypes = [
  { key: 'jailbreak', label: 'Jailbreak' },
  { key: 'promptInjection', label: 'Prompt Injection' },
  { key: 'toxicity', label: 'Toxicity' },
  { key: 'piiExtraction', label: 'PII Extraction' },
  { key: 'socialEngineering', label: 'Social Engineering' },
  { key: 'contextManipulation', label: 'Context Manipulation' }
];

const getHeatmapColor = (value: number): string => {
  if (value <= 5) return 'hsl(var(--chart-1))'; // Secure
  if (value <= 10) return 'hsl(var(--chart-2))'; // Low
  if (value <= 15) return 'hsl(var(--chart-3))'; // Medium
  if (value <= 20) return 'hsl(var(--chart-4))'; // High
  return 'hsl(var(--chart-5))'; // Critical
};

const getHeatmapIntensity = (value: number): number => {
  return Math.min(1, value / 30); // Normalize to 0-1 range
};

export const VulnerabilityHeatmap = () => {
  const [tooltip, setTooltip] = useState<TooltipData | null>(null);
  const [hoveredCell, setHoveredCell] = useState<string | null>(null);

  const handleCellHover = (model: string, attackType: string, value: number) => {
    // Use deterministic mock data based on model and attack type to avoid hydration mismatch
    const hash = model.length + attackType.length + value;
    const attempts = 100 + (hash % 400); // Deterministic "random" between 100-500

    setTooltip({
      model,
      attackType,
      successRate: value,
      attempts
    });
    setHoveredCell(`${model}-${attackType}`);
  };

  const handleCellLeave = () => {
    setTooltip(null);
    setHoveredCell(null);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.6 }}
    >
      <Card className="@container/card">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <CardTitle>Model Vulnerability Matrix</CardTitle>
              <IconInfoCircle className="w-5 h-5 text-muted-foreground" />
            </div>

            <div className="flex items-center gap-4 text-xs">
              <span className="text-muted-foreground">Success Rate:</span>
              <div className="flex items-center gap-2">
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-sm" style={{ backgroundColor: 'hsl(var(--chart-1))' }}></div>
                  <span className="text-muted-foreground">0-5%</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-sm" style={{ backgroundColor: 'hsl(var(--chart-2))' }}></div>
                  <span className="text-muted-foreground">6-10%</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-sm" style={{ backgroundColor: 'hsl(var(--chart-3))' }}></div>
                  <span className="text-muted-foreground">11-15%</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-sm" style={{ backgroundColor: 'hsl(var(--chart-4))' }}></div>
                  <span className="text-muted-foreground">16-20%</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-sm" style={{ backgroundColor: 'hsl(var(--chart-5))' }}></div>
                  <span className="text-muted-foreground">21%+</span>
                </div>
              </div>
            </div>
          </div>
          <CardDescription>
            Interactive vulnerability assessment matrix showing success rates across different attack vectors
          </CardDescription>
        </CardHeader>
        <CardContent>

      <div className="relative overflow-x-auto">
        <div className="min-w-[800px]">
          {/* Header Row */}
          <div className="grid grid-cols-7 gap-2 mb-2">
            <div className="p-3 text-sm font-semibold text-muted-foreground uppercase tracking-wide">
              Model / Provider
            </div>
            {attackTypes.map((attack) => (
              <div
                key={attack.key}
                className="p-3 text-center text-sm font-semibold text-muted-foreground uppercase tracking-wide"
                style={{ writingMode: 'horizontal-tb' }}
              >
                {attack.label}
              </div>
            ))}
          </div>

          {/* Data Rows */}
          {vulnerabilityData.map((model, modelIndex) => (
            <motion.div
              key={model.model}
              className="grid grid-cols-7 gap-2 mb-2"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3, delay: modelIndex * 0.1 }}
            >
              {/* Model Name */}
              <div className="flex flex-col justify-center p-3 rounded-lg bg-muted/50">
                <div className="font-semibold text-foreground text-sm">{model.model}</div>
                <div className="text-xs text-muted-foreground">{model.provider}</div>
              </div>

              {/* Vulnerability Cells */}
              {attackTypes.map((attack) => {
                const value = model[attack.key as keyof VulnerabilityData] as number;
                const cellId = `${model.model}-${attack.key}`;
                const isHovered = hoveredCell === cellId;

                return (
                  <motion.div
                    key={attack.key}
                    className="relative p-3 rounded-lg cursor-pointer transition-all duration-200"
                    style={{
                      backgroundColor: getHeatmapColor(value),
                      opacity: 0.7 + (getHeatmapIntensity(value) * 0.3),
                      transform: isHovered ? 'scale(1.05)' : 'scale(1)',
                      boxShadow: isHovered ? `0 4px 12px ${getHeatmapColor(value)}40` : 'none'
                    }}
                    onMouseEnter={() => handleCellHover(model.model, attack.label, value)}
                    onMouseLeave={handleCellLeave}
                    whileHover={{ scale: 1.05 }}
                  >
                    <div className="text-center">
                      <div className="font-bold text-white text-lg font-mono">
                        {value}%
                      </div>
                    </div>
                  </motion.div>
                );
              })}
            </motion.div>
          ))}
        </div>

        {/* Tooltip */}
        {tooltip && (
          <motion.div
            className="absolute z-10 p-3 rounded-lg shadow-xl pointer-events-none bg-popover border border-border"
            style={{
              left: '50%',
              top: '50%'
            }}
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8 }}
          >
            <div className="text-sm text-popover-foreground font-semibold mb-1">
              {tooltip.model}
            </div>
            <div className="text-xs text-muted-foreground mb-2">
              {tooltip.attackType}
            </div>
            <div className="text-xs space-y-1">
              <div className="flex justify-between gap-4">
                <span className="text-muted-foreground">Success Rate:</span>
                <span className="text-popover-foreground font-mono">{tooltip.successRate}%</span>
              </div>
              <div className="flex justify-between gap-4">
                <span className="text-muted-foreground">Attempts:</span>
                <span className="text-popover-foreground font-mono">{tooltip.attempts}</span>
              </div>
            </div>
          </motion.div>
        )}
      </div>

        {/* Summary Stats */}
        <div className="mt-6 pt-6 border-t border-border">
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-2xl font-bold text-foreground font-mono">
                {Math.round(vulnerabilityData.reduce((acc, model) =>
                  acc + Object.values(model).slice(2).reduce((sum: number, val) => sum + (val as number), 0) / 6, 0
                ) / vulnerabilityData.length)}%
              </div>
              <div className="text-xs text-muted-foreground uppercase tracking-wide">Average Risk</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-foreground font-mono">
                {vulnerabilityData.find(m => m.provider === 'Anthropic')?.model.split(' ')[0]}
              </div>
              <div className="text-xs text-muted-foreground uppercase tracking-wide">Most Secure</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-foreground font-mono">
                {attackTypes[4].label}
              </div>
              <div className="text-xs text-muted-foreground uppercase tracking-wide">Highest Risk Vector</div>
            </div>
          </div>
        </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};